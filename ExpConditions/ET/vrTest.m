
    % skip screen test!!!!!!!!!!

clear all;
    
%% set testing parameters
eyetracking = 1;
preCalib = 0;

%% set experiment parameters
addpath(genpath('images')); % whatever the folder with the stimuli images in it is gonna be called
addpath(genpath(('../../library')));
addpath(genpath('helpers')); % gamepad scripts and such...I think?
addpath(genpath('C:\Users\cogni\TobiiProSDK'));
addpath(genpath('C:\Users\cogni\Desktop\InProgress\Experiments\VRExperiments'));  %gamepad script 
addpath(genpath('C:\Users\cogni\Desktop\InProgress\Experiments\Eyetracking_Support')); % joyMEX, gamepad in here

expName = 'vrTest'; % probs gonna change 

screenDim = get(0,'screensize'); 
resX = screenDim(3); resY = screenDim(4);
bgArea = screenDim;

p1Time = 1; 

% load all the images we need
fixCross = imread('0.jpg');
bg = imread('bgFix.jpg'); 
controllerImg = imread('controller.png'); 


% colours
white = [255 255 255];
black = [0 0 0];
red = [255 0 0];
green = [0 255 0];
blue = [0 0 255];
grey = [100 100 100]+50;



%% get participant ID & booth
inputOK = 0;
while inputOK == 0
    ok = 1;
    answer = inputdlg({'Cube Set:', 'Category Mapping: '}, 'Please input participant details...', 1, {'', ''});

    if (str2double(answer{1}) > 5) || isnan(str2double(answer{1})) || (str2double(answer{1}) < 0)
        ok = 0; disp('Invalid Cube Set')
    end
    if (str2double(answer{2}) > 23) || isnan(str2double(answer{1})) || (str2double(answer{2}) < 0)
        ok = 0; disp('Invalid Category Mapping')
    end
    if ok == 1, inputOK = 1;
    end
end
cubeSet = str2double(answer{1});

catMap = str2double(answer{2});

%% counterbalancing ...
% we get initial guess at the counterbalancing condition based on the subjectNumber
% source data representing the different experimental conditions is shared by each condition
% 3x2arrangements.mat is generated by arrangements.m from data on mary
load('3x2arrangements.mat');
% contains "arrangements", a 6 x 24 x 8 x 3 array of structs
% each struct is something like {"cat":"c0","color":"r","rotation":0,"shape":"O"}
% using a map to make the actual construction of the stimuli easier to understand below
textureMap = containers.Map;
bluecross = imread('By.png');  textureMap('A') = bluecross;
blueline = imread('Bx.png');  textureMap('V') = blueline;
grvort = imread('Gx.png');  textureMap('@') = grvort;
grlines = imread('Gy.png');  textureMap('=') = grlines;
redomega = imread('Ry.png');  textureMap('O') = redomega;
reddiam = imread('Rx.png');  textureMap('D') = reddiam;

categoryMap = containers.Map;
categoryMap('c0') = 'A';
categoryMap('c1') = 'B';
categoryMap('c2') = 'C';
categoryMap('c3') = 'D';

dims = size(arrangements); % cubesets: 6, category mappings: 24, cubes: 8, axes: 3 (the features displayed)
% really important that each condition uses the same set of cubes mapped to
% same set of categories - we need to record this data


subjectNumber = 10000 + cubeSet*100 + catMap;   % created from inputted cube set + category map

disp(['using counterbalancing conditions cubeSet ' num2str(cubeSet) ' and catMap ' num2str(catMap) ' for subjectNumber ' num2str(subjectNumber) ])

cont = inputdlg(['Subject Number: ',  num2str(subjectNumber)]);

% define '0' for each feature (for triallvl table)
featureDefs = arrangements(cubeSet+1, catMap+1, 1, :); % pull first "cube": this gives us all 3 '0'-valued features


%% set up eyetracker
Tobii = EyeTrackingOperations();
eyetracker = Tobii.find_all_eyetrackers();


% establish a screen for I/O
% for debug only [window, WindowRect] = Screen('OpenWindow', 0, black, [ 0 0 800 600 ]); 
[window, WindowRect] = Screen('OpenWindow', 0, black);
PsychDefaultSetup(2);
%Screen('Preference', 'SkipSyncTests', 1); % skipping sync tests
Screen('Preference', 'Verbosity', 0);

[screenXpixels, screenYpixels] = Screen('WindowSize', window);
screen_pixels = [screenXpixels screenYpixels];

[xCenter, yCenter] = RectCenter(WindowRect);


%% initialize game controller   
JoyMEX('init',0);
% Hide cursor
HideCursor();

%% track status
dotSizePix = 30;

eyetracker.get_gaze_data();
Screen('TextSize', window, 20);

while 1
    
    DrawFormattedText(window, 'When correctly positioned press any key to start the calibration.', 'center', screenYpixels * 0.1, white);

    distance = [];

    gaze_data = eyetracker.get_gaze_data();

    if ~isempty(gaze_data)
        last_gaze = gaze_data(end);

        validityColor = white;


        if last_gaze.LeftEye.GazeOrigin.Validity.value && last_gaze.RightEye.GazeOrigin.Validity.value
            left_validity = all(last_gaze.LeftEye.GazeOrigin.InTrackBoxCoordinateSystem(1:2) < 0.85) ...
                                 && all(last_gaze.LeftEye.GazeOrigin.InTrackBoxCoordinateSystem(1:2) > 0.15);
            right_validity = all(last_gaze.RightEye.GazeOrigin.InTrackBoxCoordinateSystem(1:2) < 0.85) ...
                                 && all(last_gaze.RightEye.GazeOrigin.InTrackBoxCoordinateSystem(1:2) > 0.15);
            if left_validity && right_validity
                validityColor = green;
            end
        end

        origin = [screenXpixels/4 screenYpixels/4];
        size = [screenXpixels/2 screenYpixels/2];

        penWidthPixels = 3;
        baseRect = [0 0 size(1) size(2)];
        frame = CenterRectOnPointd(baseRect, screenXpixels/2, yCenter);

        Screen('FrameRect', window, validityColor, frame, penWidthPixels);

        % Left Eye
        if last_gaze.LeftEye.GazeOrigin.Validity.value
            distance = [distance; round(last_gaze.LeftEye.GazeOrigin.InUserCoordinateSystem(3)/10,1)];
            left_eye_pos_x = double(1-last_gaze.LeftEye.GazeOrigin.InTrackBoxCoordinateSystem(1))*size(1) + origin(1);
            left_eye_pos_y = double(last_gaze.LeftEye.GazeOrigin.InTrackBoxCoordinateSystem(2))*size(2) + origin(2);
            Screen('DrawDots', window, [left_eye_pos_x left_eye_pos_y], dotSizePix, validityColor, [], 2);
        end

        % Right Eye
        if last_gaze.RightEye.GazeOrigin.Validity.value
            distance = [distance;round(last_gaze.RightEye.GazeOrigin.InUserCoordinateSystem(3)/10,1)];
            right_eye_pos_x = double(1-last_gaze.RightEye.GazeOrigin.InTrackBoxCoordinateSystem(1))*size(1) + origin(1);
            right_eye_pos_y = double(last_gaze.RightEye.GazeOrigin.InTrackBoxCoordinateSystem(2))*size(2) + origin(2);
            Screen('DrawDots', window, [right_eye_pos_x right_eye_pos_y], dotSizePix, validityColor, [], 2);
        end
        pause(0.05);
    end

    DrawFormattedText(window, sprintf('Current distance to the eye tracker: %.2f cm.',mean(distance)), 'center', screenYpixels * 0.85, white);

    Screen('Flip', window);
    
    if KbCheck
        break;
    end

end

eyetracker.stop_gaze_data();
% %% calibrate eye tracker

x = eyetracker.get_gaze_data();
Screen('TextSize', window, 20);
Screen('BlendFunction', window, 'GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA'); % not really sure what this is but oh well

dotSizePix = 30;
dotColor = [red;white]; % Red and white
leftColor = red; % Red
rightColor = blue; % Blue

% Calibration points
lb = 0.1;  % left bound
xc = 0.5;  % horizontal center
rb = 0.9;  % right bound
ub = 0.1;  % upper bound
yc = 0.5;  % vertical center
bb = 0.9;  % bottom bound

points_to_calibrate = [[lb,ub];[rb,ub];[xc,yc];[lb,bb];[rb,bb]];

calibInstructions = 'Please keep your head still and follow the red dot around the screen with your eyes.\nPress any button on the controller when you are ready to begin.';

DrawFormattedText(window, calibInstructions, 'center', 'center', white);
Screen('Flip', window);

getGamePadAll2;

% Create calibration object
calib = ScreenBasedCalibration(eyetracker);

calibrating = 1;


while calibrating
    % Enter calibration mode
    calib.enter_calibration_mode();
    
    flagged = [];
    
    for i=1:length(points_to_calibrate)
        
        Screen('DrawDots', window, points_to_calibrate(i,:).*screen_pixels, dotSizePix, dotColor(1,:), [], 2);
        Screen('DrawDots', window, points_to_calibrate(i,:).*screen_pixels, dotSizePix*0.5, dotColor(2,:), [], 2);
        
        Screen('Flip', window);
        
        % Wait a moment to allow the user to focus on the point
        pause(1.5);
        
        test = calib.collect_data(points_to_calibrate(i,:));
        
    end
    
    DrawFormattedText(window, 'Calculating calibration result....', 'center', 'center', white);
    
    Screen('Flip', window);
    
    % Blocking call that returns the calibration result
    calibration_result = calib.compute_and_apply();
    
    calib.leave_calibration_mode();
    
    
    points = calibration_result.CalibrationPoints;
    
    if length(points) == 0
        DrawFormattedText(window, 'Insufficient calibration data. Recalibrate?', 'center', 'center', white);
        Screen('Flip', window);
        getGamePadAll2();
        continue;
    end
    
    for i=1:length(points)
        Screen('DrawDots', window, points(i).PositionOnDisplayArea.*screen_pixels, dotSizePix*0.5, dotColor(2,:), [], 2);
        for j=1:length(points(i).RightEye)
            if points(i).LeftEye(j).Validity == CalibrationEyeValidity.ValidAndUsed
                Screen('DrawDots', window, points(i).LeftEye(j).PositionOnDisplayArea.*screen_pixels, dotSizePix*0.3, leftColor, [], 2);
                Screen('DrawLines', window, ([points(i).LeftEye(j).PositionOnDisplayArea; points(i).PositionOnDisplayArea].*screen_pixels)', 2, leftColor, [0 0], 2);
            end
            if points(i).RightEye(j).Validity == CalibrationEyeValidity.ValidAndUsed
                Screen('DrawDots', window, points(i).RightEye(j).PositionOnDisplayArea.*screen_pixels, dotSizePix*0.3, rightColor, [], 2);
                Screen('DrawLines', window, ([points(i).RightEye(j).PositionOnDisplayArea; points(i).PositionOnDisplayArea].*screen_pixels)', 2, rightColor, [0 0], 2);
            end
        end
        
    end
    
    DrawFormattedText(window, 'Press 1 to recalibrate or 2 to accept calibration and continue....', 'center', screenYpixels * 0.95, white)
    
    Screen('Flip', window);
    
    valid = false;
    while ~valid
        action = getGamePadAll2(0, 0);
        if action == 1
            valid = true;
        elseif action == 2
            valid = true;
            calibrating = false;
        end
    end
    
end

%% create output files
if ~exist([expName 'ExpLvl.txt'], 'file')
    expHeader = {'Subject', 'CubeSet', 'CategoryMapping'};
    txt=sprintf('%s\t',expHeader{:});
    txt(end)='';
    dlmwrite([expName 'ExpLvl.txt'],txt,'delimiter','', 'newline', 'pc');
end

TrialHeader = {'Subject', 'TrialNumber', 'Feature1Value', 'Feature2Value', 'Feature3Value', 'Category', 'Response', 'TrialAccuracy', 'p1Onset', 'p2Onset', 'p3Onset', 'p4Onset'};
txt=sprintf('%s\t',TrialHeader{:});
txt(end)='';
dlmwrite([expName 'TrialLvl-' num2str(subjectNumber) '.txt'],txt, 'delimiter','', 'newline', 'pc');

if ~exist([expName '-' num2str(subjectNumber) '-1.gazedata'], 'file')
    gazeHeader = {'Subject', 'TrialID', 'TrialPhase', 'TETTime', 'XGazePosRightEye', 'YGazePosRightEye', 'DiameterPupilRightEye', 'ValidityRightEye', 'XGazePosLefttEye', 'YGazePosLeftEye', 'DiameterPupilLeftEye', 'ValidityLeftEye'};
    txt=sprintf('%s\t',gazeHeader{:});
    txt(end)='';
    dlmwrite([expName '-' num2str(subjectNumber) '-1.gazedata'],txt, 'delimiter','', 'newline', 'pc')
end

% Write Explvl before recording data
fid=fopen([expName 'ExpLvl.txt'],'a+');
fprintf(fid, sprintf('%s',[num2str(subjectNumber) '\t' num2str(cubeSet) '\t' num2str(catMap) '\r\n']));
fclose(fid);

% open output files
% trial level

% gaze level
outFile = fopen([expName '-' num2str(subjectNumber) '-1.gazedata'], "a+");
outFileTrial = fopen([expName 'TrialLvl-' num2str(subjectNumber) '.txt'], "a+");


%% instructions
inst1 = 'Thank you for participating in this experiment!\n\nYou will be presented with a series of images. Your goal is to sort them into categories.'; % is this ok to say
DrawFormattedText(window, inst1, 'center','center', white);
DrawFormattedText(window, '(Press 1 to continue.)', 'center',resY*0.8,white);
Screen('Flip', window);
getGamePadAll2(1);

inst2 = 'Before every image, you will see a cross appear on the screen. Please look at it.\n\nThen, you are free to look at each image as long as you like.';
DrawFormattedText(window, inst2, 'center','center', white);
DrawFormattedText(window, '(Press 2 to continue.)', 'center',resY*0.8,white);
Screen('Flip', window);
getGamePadAll2(2);


inst3 = ['Once you have picked a category for the image, you will use the buttons on the top of the controller to make your choice.\n\nThese buttons should be under your index and middle fingers.\n\nEach button corresponds to one of the four categories as follows:\n\n\nA: L index', blanks(5), 'B: R index\nC: L middle', blanks(5), 'D: R middle'];
controllerTexture = Screen('MakeTexture', window, controllerImg); 
Screen('DrawTexture', window, controllerTexture, [], [], 0);
DrawFormattedText(window, inst3, 'center',resY*0.2, white);
DrawFormattedText(window, '(Press the button corresponding to category ''C'' to continue.)', 'center',resY*0.75,white);
Screen('Flip', window);
getGamePadAll2(7);

inst4 = 'Try pressing the buttons a few times to see what categories they are!';
DrawFormattedText(window, inst4, 'center','center', white);
Screen('Flip', window);
pause(1);

cont = false;
while ~cont
    press = getGamePadAll2(0, 0);
    if press == 2
       cont = true;
    else
        category = convert(press); 
        if category == 'X'
            message = 'Invalid buton! Please try again.';
        else
            message = ['You pressed the button for category ''', category, ''''];
        end
        DrawFormattedText(window, message, 'center', resY*0.6, white);
    end
    DrawFormattedText(window, 'When you are ready to move on, press 2 to continue.', 'center',resY*0.8,white);
    Screen('Flip', window);
end


inst5 = 'Good! Once you make your choice, you will be given some feedback.\n\nYou can look at this feedack as long as you like.\n\nWhen you are ready for the next image, simply press 1 on the controller to continue.';
DrawFormattedText(window, inst5, 'center','center', white);
DrawFormattedText(window, '(Press 1 to continue.)', 'center',resY*0.8,white);
Screen('Flip', window);
getGamePadAll2(1);



inst6 = 'You are almost ready to start now.\n\nRemember, your goal is to determine which of the four categories each image belongs in.\n\nIt might be challenging at first, but it is up to you to figure out how to decide which category each image goes in.';
DrawFormattedText(window, inst6, 'center','center', white);
DrawFormattedText(window, '(Press the button for category ''B'' to continue.)', 'center',resY*0.8,white);
Screen('Flip', window);
getGamePadAll2(6);

inst7 = 'Good luck and thank you again for taking the time to help out science!';
DrawFormattedText(window, inst7, 'center','center', white);
DrawFormattedText(window, 'Press the button for category ''D'' to begin the experiment!', 'center',resY*0.8,white);
Screen('Flip', window);
getGamePadAll2(8);



topLeft = [0 0 resX*0.15 resY*0.20];
topRight = [resX*0.83 0 resX resY*0.20];
bottomLeft = [0 resY*0.83 resX*0.15 resY];
bottomRight = [resX*0.83 resY*0.83 resX  resY];

center = [resX/2, resY/2 + 50];

last = [];

%% LOOP through trials:

Screen('TextSize', window, 100); 

numTrialsPerBlock = 8; % go through each possible stim once
numBlocks = 30; % for 240 total

startTracking = eyetracker.get_gaze_data(); % begin data collection

for currentBlock = 1:numBlocks
    
    % get order of stimuli for this block (scramble)
    order = randperm(8); % do i need to change seed for this or something
    first = order(1);
    while first == last
        order = randperm(8);
        first = order(1);
        last = order(end);
    end
    
    for trial = 1: numTrialsPerBlock
        trialNum  = (currentBlock-1)*numTrialsPerBlock + trial;
        trialPhase = [];
    
    %% phase 1: fixation cross
    
        imageTexture = Screen('MakeTexture', window, fixCross); 
        Screen('DrawTexture', window, imageTexture, [], [], 0);  % Draw the image to the screen
        Screen('Flip', window); % Flip to the screen
        
        startGaze = eyetracker.get_gaze_data();

        fixCrossStart = Tobii.get_system_time_stamp;
        
        pause(p1Time);
        fixCrossGaze = eyetracker.get_gaze_data();
        
        % write to output file
          for j = 1:length(fixCrossGaze) 
             fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 1);
             fprintf(outFile, "%d\t", fixCrossGaze(j).DeviceTimeStamp); 
             fprintf(outFile, "%f\t", fixCrossGaze(j).RightEye.GazePoint.OnDisplayArea(1));
             fprintf(outFile, "%f\t", fixCrossGaze(j).RightEye.GazePoint.OnDisplayArea(2));
             fprintf(outFile, "%f\t", fixCrossGaze(j).RightEye.Pupil.Diameter);
             fprintf(outFile, "%d\t", fixCrossGaze(j).RightEye.GazePoint.Validity == Validity.Valid);
             fprintf(outFile, "%f\t", fixCrossGaze(j).LeftEye.GazePoint.OnDisplayArea(1));
             fprintf(outFile, "%f\t", fixCrossGaze(j).LeftEye.GazePoint.OnDisplayArea(2));
             fprintf(outFile, "%f\t", fixCrossGaze(j).LeftEye.Pupil.Diameter);
             fprintf(outFile, "%d\t", fixCrossGaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
             fprintf(outFile, '\r\n');
          end
       

    %% phase 2: stimulus presentation
    
        % draw stimulus
        trialStim = order(trial); 
        % background
        bgTexture = Screen('MakeTexture', window, bg); 
        Screen('DrawTexture', window, bgTexture, [], [], 0); 
        
        % features - equivalent to the 3 axes of a cube
        
        textures = [];
        locations = [];
        featureValues = [];
        for feature = 1:3 % need to do this for each feature
   
            featStruct = arrangements(cubeSet+1, catMap+1, trialStim, feature);
            featShape = Screen('MakeTexture', window, textureMap(featStruct.shape));
            correctCategory = categoryMap(featStruct.cat);
            textures = [textures; featShape];
            locations = [locations; [makeRec(featStruct.rotation, resX, resY)]];
            featureValues = [featureValues, double(~isequal(featStruct,featureDefs(feature)))];
        end  
         
        Screen('DrawTexture', window, textures(1), [], locations(1,:));
        Screen('DrawTexture', window, textures(2), [], locations(2,:));
        Screen('DrawTexture', window, textures(3), [], locations(3,:));
        
        % category buttons

        DrawFormattedText(window, 'A', (topLeft(1)+topLeft(3))/2, (topLeft(2)+topLeft(4))/2, white);
        DrawFormattedText(window, 'B', (topRight(1)+topRight(3))/2, (topRight(2)+topRight(4))/2, white);
        DrawFormattedText(window, 'C', (bottomLeft(1)+bottomLeft(3))/2, (bottomLeft(2)+bottomLeft(4))/2, white);
        DrawFormattedText(window, 'D', (bottomRight(1)+bottomRight(3))/2, (bottomRight(2)+bottomRight(4))/2, white);
        
        Screen('Flip', window);
        

        trialStart = Tobii.get_system_time_stamp;
        
        p2Gaze = eyetracker.get_gaze_data();     
        

        
    %% phase 3: response
    
        resp = getGamePadAll2(0, 0); % arguments don't matter
        response = convert(resp);
        
        p2Gaze = eyetracker.get_gaze_data; 
        
        while response == 'X'
            resp = getGamePadAll2(0, 0); % arguments don't matter
            response = convert(resp);
        end
        
        % write to output file
        for j = 1:length(p2Gaze)
            fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 2);
            fprintf(outFile, "%d\t", p2Gaze(j).DeviceTimeStamp);  % should this be system timestamp instead???
            fprintf(outFile, "%f\t", p2Gaze(j).RightEye.GazePoint.OnDisplayArea(1));
            fprintf(outFile, "%f\t", p2Gaze(j).RightEye.GazePoint.OnDisplayArea(2));
            fprintf(outFile, "%f\t", p2Gaze(j).RightEye.Pupil.Diameter);
            fprintf(outFile, "%d\t", p2Gaze(j).RightEye.GazePoint.Validity == Validity.Valid);
            fprintf(outFile, "%f\t", p2Gaze(j).LeftEye.GazePoint.OnDisplayArea(1));
            fprintf(outFile, "%f\t", p2Gaze(j).LeftEye.GazePoint.OnDisplayArea(2));
            fprintf(outFile, "%f\t", p2Gaze(j).LeftEye.Pupil.Diameter);
            fprintf(outFile, "%d\t", p2Gaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
            fprintf(outFile, '\r\n');
        end
        
        responseTime = Tobii.get_system_time_stamp;


        accuracy = (double(response == correctCategory));
        p3Gaze = eyetracker.get_gaze_data;
        
        % write to output file
         for j = 1:length(p3Gaze) 
             fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 3);
             fprintf(outFile, "%d\t", p3Gaze(j).DeviceTimeStamp);  % should this be system timestamp instead???
             fprintf(outFile, "%f\t", p3Gaze(j).RightEye.GazePoint.OnDisplayArea(1));
             fprintf(outFile, "%f\t", p3Gaze(j).RightEye.GazePoint.OnDisplayArea(2));
             fprintf(outFile, "%f\t", p3Gaze(j).RightEye.Pupil.Diameter);
             fprintf(outFile, "%d\t", p3Gaze(j).RightEye.GazePoint.Validity == Validity.Valid);
             fprintf(outFile, "%f\t", p3Gaze(j).LeftEye.GazePoint.OnDisplayArea(1));
             fprintf(outFile, "%f\t", p3Gaze(j).LeftEye.GazePoint.OnDisplayArea(2));
             fprintf(outFile, "%f\t", p3Gaze(j).LeftEye.Pupil.Diameter);
             fprintf(outFile, "%d\t", p3Gaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
             fprintf(outFile, '\r\n');
         end

    %% phase 4: feedback
    
            % redraw stimulus
        Screen('DrawTexture', window, bgTexture); 
        Screen('DrawTexture', window, textures(1), [], locations(1,:));
        Screen('DrawTexture', window, textures(2), [], locations(2,:));
        Screen('DrawTexture', window, textures(3), [], locations(3,:)); 
               
        DrawFormattedText(window, 'A', (topLeft(1)+topLeft(3))/2, (topLeft(2)+topLeft(4))/2, white);
        DrawFormattedText(window, 'B', (topRight(1)+topRight(3))/2, (topRight(2)+topRight(4))/2, white);
        DrawFormattedText(window, 'C', (bottomLeft(1)+bottomLeft(3))/2, (bottomLeft(2)+bottomLeft(4))/2, white);
        DrawFormattedText(window, 'D', (bottomRight(1)+bottomRight(3))/2, (bottomRight(2)+bottomRight(4))/2, white);
        
        % red for response
        switch response
            case 'A'
                respLoc = topLeft;
            case 'B'
                respLoc = topRight;
            case 'C'
                respLoc = bottomLeft;
            case 'D'
                respLoc = bottomRight;
        end
        
        DrawFormattedText(window, response, (respLoc(1) + respLoc(3))/2, (respLoc(2) + respLoc(4))/2, red);
        
        % green for correct answer
        switch correctCategory 
            case 'A'
                correctLoc = topLeft;
            case 'B'
                correctLoc = topRight;
            case 'C'
                correctLoc = bottomLeft;
            case 'D' 
                correctLoc = bottomRight;
        end
        
        DrawFormattedText(window, correctCategory, (correctLoc(1) + correctLoc(3))/2, (correctLoc(2) + correctLoc(4))/2, green);
         
        Screen('Flip', window);
         
        fbOnset = Tobii.get_system_time_stamp;

        % press '1' to move on to next trial
        getGamePadAll2(1);
         
        p4Gaze = eyetracker.get_gaze_data();
        
        %% formatting data for output file
        % I have no idea what any of this is, maybe some comments to
        % describe what we are saving?
        
        % instead of trying to save everything in memory save it to file directly
        % left the TrialLvl stuff but that could be treated the same way 
        % doing this in a verbose way to make debugging issues easier
        
        
        % write to gazelvl
%           for j = 1:length(fixCrossGaze) 
%              fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 1);
%              fprintf(outFile, "%d\t", fixCrossGaze(j).DeviceTimeStamp);  % should this be system timestamp instead???
%              fprintf(outFile, "%f\t", fixCrossGaze(j).RightEye.GazePoint.OnDisplayArea(1));
%              fprintf(outFile, "%f\t", fixCrossGaze(j).RightEye.GazePoint.OnDisplayArea(2));
%              fprintf(outFile, "%f\t", fixCrossGaze(j).RightEye.Pupil.Diameter);
%              fprintf(outFile, "%d\t", fixCrossGaze(j).RightEye.GazePoint.Validity == Validity.Valid);
%              fprintf(outFile, "%f\t", fixCrossGaze(j).LeftEye.GazePoint.OnDisplayArea(1));
%              fprintf(outFile, "%f\t", fixCrossGaze(j).LeftEye.GazePoint.OnDisplayArea(2));
%              fprintf(outFile, "%f\t", fixCrossGaze(j).LeftEye.Pupil.Diameter);
%              fprintf(outFile, "%d\t", fixCrossGaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
%              fprintf(outFile, '\r\n');
%           end
 
%          for j = 1:length(p2Gaze) 
%              fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 2);
%              fprintf(outFile, "%d\t", p2Gaze(j).DeviceTimeStamp);  % should this be system timestamp instead???
%              fprintf(outFile, "%f\t", p2Gaze(j).RightEye.GazePoint.OnDisplayArea(1));
%              fprintf(outFile, "%f\t", p2Gaze(j).RightEye.GazePoint.OnDisplayArea(2));
%              fprintf(outFile, "%f\t", p2Gaze(j).RightEye.Pupil.Diameter);
%              fprintf(outFile, "%d\t", p2Gaze(j).RightEye.GazePoint.Validity == Validity.Valid);
%              fprintf(outFile, "%f\t", p2Gaze(j).LeftEye.GazePoint.OnDisplayArea(1));
%              fprintf(outFile, "%f\t", p2Gaze(j).LeftEye.GazePoint.OnDisplayArea(2));
%              fprintf(outFile, "%f\t", p2Gaze(j).LeftEye.Pupil.Diameter);
%              fprintf(outFile, "%d\t", p2Gaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
%              fprintf(outFile, '\r\n');
%          end
         
%          for j = 1:length(p3Gaze) 
%              fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 3);
%              fprintf(outFile, "%d\t", p3Gaze(j).DeviceTimeStamp);  % should this be system timestamp instead???
%              fprintf(outFile, "%f\t", p3Gaze(j).RightEye.GazePoint.OnDisplayArea(1));
%              fprintf(outFile, "%f\t", p3Gaze(j).RightEye.GazePoint.OnDisplayArea(2));
%              fprintf(outFile, "%f\t", p3Gaze(j).RightEye.Pupil.Diameter);
%              fprintf(outFile, "%d\t", p3Gaze(j).RightEye.GazePoint.Validity == Validity.Valid);
%              fprintf(outFile, "%f\t", p3Gaze(j).LeftEye.GazePoint.OnDisplayArea(1));
%              fprintf(outFile, "%f\t", p3Gaze(j).LeftEye.GazePoint.OnDisplayArea(2));
%              fprintf(outFile, "%f\t", p3Gaze(j).LeftEye.Pupil.Diameter);
%              fprintf(outFile, "%d\t", p3Gaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
%              fprintf(outFile, '\r\n');
%          end
         
         for j = 1:length(p4Gaze)
             fprintf(outFile, "%d\t%d\t%d\t", subjectNumber, trialNum, 4);
             fprintf(outFile, "%d\t", p4Gaze(j).DeviceTimeStamp);  % should this be system timestamp instead???
             fprintf(outFile, "%f\t", p4Gaze(j).RightEye.GazePoint.OnDisplayArea(1));
             fprintf(outFile, "%f\t", p4Gaze(j).RightEye.GazePoint.OnDisplayArea(2));
             fprintf(outFile, "%f\t", p4Gaze(j).RightEye.Pupil.Diameter);
             fprintf(outFile, "%d\t", p4Gaze(j).RightEye.GazePoint.Validity == Validity.Valid);
             fprintf(outFile, "%f\t", p4Gaze(j).LeftEye.GazePoint.OnDisplayArea(1));
             fprintf(outFile, "%f\t", p4Gaze(j).LeftEye.GazePoint.OnDisplayArea(2));
             fprintf(outFile, "%f\t", p4Gaze(j).LeftEye.Pupil.Diameter);
             fprintf(outFile, "%d\t", p4Gaze(j).LeftEye.GazePoint.Validity == Validity.Valid);
             fprintf(outFile, '\r\n');
         end
         
         
        % for trial lvl
        fprintf(outFileTrial, "%d\t%d\t%d\t%d\t%d\t%c\t%c\t%d\t%f\t%f\t%f\t%f\r\n", ...
            subjectNumber, trialNum, ... 
            featureValues(1), featureValues(2), featureValues(3), ...
            correctCategory, response, accuracy, ...
            fixCrossStart, trialStart, responseTime, fbOnset);
    end
        
end

fclose(outFile);
fclose(outFileTrial);

Screen('TextSize', window, 20);
DrawFormattedText(window, 'Congratulations! You''ve completed the experiment.\n\nYou may now exit the booth and tell the experimenter you are done.', 'center', 'center', white);
Screen('Flip', window);
eyetracker.stop_gaze_data();

%pause(60);


%% write other output files/shut down eyetracker

Screen('CloseAll');


%% helper functions

function category = convert(button)  
    if button == 5
        category = 'A';
    elseif button == 6
        category = 'B';
    elseif button == 7
        category = 'C';
    elseif button == 8
        category = 'D';
    else
        category = 'X';
        
    end
end


function rectangle = makeRec(location, resX, resY)

    imgSize = [100 100];
    center = [resX/2, resY/2 + 50];
    distance = resY*0.42;
    shiftAngle = 50;
    
    [x, y] = getCoords(shiftAngle, distance, location);
        
    leftBound = center(1) + x - imgSize(1)/2;
    topBound = center(2) + y - imgSize(2)/2;
    rightBound = leftBound + imgSize(1);
    bottomBound = topBound + imgSize(2);
                
    rectangle = [leftBound topBound rightBound bottomBound];
    
end

function [x, y] = getCoords(angle, dist, loc)   % this will return the location of the centre of the feature

    if loc == 0   
        x = dist*sind(120 + angle); % I know it looks weird that this has the 120 in it, but I swear this works
        y = dist*cosd(120 + angle);
        
    elseif loc == 120
        x = dist*sind(angle);
        y = dist*cosd(angle);
        
    else       
        x = dist*sind(240 + angle);
        y = dist*cosd(240 + angle);
    end
        
end

    